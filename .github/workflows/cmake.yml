name: CMake build

on:
  push:
  pull_request:
  schedule:
    # 0h mondays
    - cron: '0 0 * * 1'

permissions:
  contents: read

jobs:
  cmake-main:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        toolchain:
          - {compiler: gcc, version: 11, cflags: '-Wall -Wextra -Werror', fflags: '-Wall -Wextra -Wpedantic -Werror -pedantic -fimplicit-none -frecursive -fcheck=all -fstack-check -Wno-function-elimination'}
          - {compiler: intel-classic, version: '2021.9', cflags: '-diag-disable=10441', fflags: '-warn all -debug extended -fimplicit-none -standard-semantics -assume recursion'}
        include:
          - os: ubuntu-latest
            toolchain: {compiler: intel, version: '2023.1', cflags: '', fflags: '-warn all -debug extended -fimplicit-none -standard-semantics -assume recursion'}
          - os: windows-latest
            toolchain: {compiler: intel, version: '2023.1', cflags: '', fflags: '/warn:all /debug:extended /fimplicit-none /standard-semantics /assume:recursion'}
          - os: windows-latest
            toolchain: {compiler: intel-classic, version: '2021.9', cflags: '/Qdiag-disable:10441', fflags: '/warn:all /debug:extended /fimplicit-none /standard-semantics /assume:recursion'}
    steps:
      - uses: actions/checkout@v3
      - name: Install Ninja / Ubuntu
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: sudo apt-get update && sudo apt-get install ninja-build
      - name: Install Ninja / MacOS
        if: ${{ matrix.os == 'macos-latest' }}
        run: brew install ninja
      - uses: awvwgk/setup-fortran@main
        id: setup-fortran
        with:
          compiler: ${{ matrix.toolchain.compiler }}
          version: ${{ matrix.toolchain.version }}
      - name: Build
        run: |
          cmake --version
          cmake -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=. -LAH -DCMAKE_C_FLAGS="${{ matrix.toolchain.cflags }}" -DCMAKE_Fortran_FLAGS="${{ matrix.toolchain.fflags }}" .
          cmake --build . --target install --parallel 4
          cmake --build . --target examples --parallel 4
          ctest --output-on-failure -V -j4 -R example
        env:
          FC: ${{ steps.setup-fortran.outputs.fc }}
      - name: Test
        if: ${{ github.event_name == 'schedule' }}
        run: |
          cmake --build . --target tests --parallel 4
          ctest --output-on-failure -V -j4 -R large

  cmake-other:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - {compiler: aflang, cflags: '-Wall', fflags: '-pedantic -Weverything -Wall -Wextra -Minform=warn -Mstandard -Mrecursive'}
          - {compiler: nvfortran, cflags: '-Wall', fflags: '-C -Wall -Wextra -Minform=warn -Mstandard -Mrecursive -Mbounds -Mchkstk -Mchkptr'}
          - {compiler: flang, cflags: '-Wall', fflags: '-pedantic -Weverything -Wall -Wextra'}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install AOCC
        if: ${{ matrix.toolchain.compiler == 'aflang' }}
        run: bash .github/scripts/install_aocc
      - name: Install nvfortran
        if: ${{ matrix.toolchain.compiler == 'nvfortran' }}
        run: bash .github/scripts/install_nvfortran
      - name: Install Flang
        if: ${{ matrix.toolchain.compiler == 'flang' }}
        run: bash .github/scripts/install_flang
      - name: Build
        run: |
          cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=. -LAH -DCMAKE_C_FLAGS="${{ matrix.toolchain.cflags }}" -DCMAKE_Fortran_FLAGS="${{ matrix.toolchain.fflags }}" -DBUILD_SHARED_LIBS=ON .
          cmake --build . --target install --parallel 4
          cmake --build . --target examples --parallel 4
          # cobyla test does not pass on AOCC: https://github.com/libprima/prima/issues/41
          ctest --output-on-failure -V -j4 -R example -E cobyla
        env:
          FC: ${{ matrix.toolchain.compiler }}
      - name: Stress test
        if: ${{ github.event_name == 'schedule' }}
        run: |
          cmake --build . --target tests --parallel 4
          ctest --output-on-failure -V -j4 -R large -E cobyla
