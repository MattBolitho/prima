name: CMake build on Raspberry Pi

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * 1'  # 0h mondays
  workflow_dispatch:
    inputs:
      git-ref:
        description: Git Ref (Optional)
        required: false

# Show the git ref in the workflow name if it is invoked manually.
run-name: ${{ github.event_name == 'workflow_dispatch' && format('Manual run {0}', inputs.git-ref) || '' }}


permissions:
  contents: read

jobs:

  cmake-main:
    runs-on: [self-hosted, pi]
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - {compiler: gcc, cflags: '-Wall -Wextra -Werror', fflags: '-Wall -Wextra -Wpedantic -Werror -pedantic -fimplicit-none -frecursive -fcheck=all -fstack-check -Wno-function-elimination'}

    steps:

      - name: Clone Repository (Latest)
        uses: actions/checkout@v4
        if: github.event.inputs.git-ref == ''
        with:
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY_ACT }} # This forces checkout to use SSH, not HTTPS
          submodules: recursive
      - name: Clone Repository (Custom Ref)
        uses: actions/checkout@v4
        if: github.event.inputs.git-ref != ''
        with:
          ref: ${{ github.event.inputs.git-ref }}
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY_ACT }} # This forces checkout to use SSH, not HTTPS
          submodules: recursive

      - name: Build
        run: |
          cmake --version
          cmake -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=. -LAH -DCMAKE_C_FLAGS="${{ matrix.toolchain.cflags }}" -DCMAKE_Fortran_FLAGS="${{ matrix.toolchain.fflags }}" .
          cmake --build . --target install --parallel 4
          cmake --build . --target examples --parallel 4
          ctest --output-on-failure -V -j4 -R example
        env:
          FC: ${{ steps.setup-fortran.outputs.fc }}


  cmake-other:
    runs-on: [self-hosted, ARM64, pi64]
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - {compiler: nvfortran, cflags: '-Wall', fflags: '-C -Wall -Wextra -Minform=warn -Mstandard -Mrecursive -Mbounds -Mchkstk -Mchkptr'}
          - {compiler: flang, cflags: '-Wall', fflags: '-pedantic -Weverything -Wall -Wextra'}

    steps:

      - name: Clone Repository (Latest)
        uses: actions/checkout@v4
        if: github.event.inputs.git-ref == ''
        with:
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY_ACT }} # This forces checkout to use SSH, not HTTPS
          submodules: recursive
      - name: Clone Repository (Custom Ref)
        uses: actions/checkout@v4
        if: github.event.inputs.git-ref != ''
        with:
          ref: ${{ github.event.inputs.git-ref }}
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY_ACT }} # This forces checkout to use SSH, not HTTPS
          submodules: recursive

      - name: Build
        run: |
          cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=. -LAH -DCMAKE_C_FLAGS="${{ matrix.toolchain.cflags }}" -DCMAKE_Fortran_FLAGS="${{ matrix.toolchain.fflags }}" .
          cmake --build . --target install --parallel 4
          cmake --build . --target examples --parallel 4
          # cobyla test does not pass on AOCC: https://github.com/libprima/prima/issues/41
          ctest --output-on-failure -V -j4 -R example -E cobyla
        env:
          FC: ${{ matrix.toolchain.compiler }}


  # The following job check whether the tests were successful or cancelled due to timeout.
  # N.B.: Remember to specify `continue-on-error: true` for the job of the tests.
  check_success_timeout:
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
    needs: [cmake-main, cmake-other]
    steps:
      - name: Clone the GitHub actions scripts
        uses: actions/checkout@v4
        with:
          repository: equipez/github_actions_scripts
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY_ACT }} # This forces checkout to use SSH, not HTTPS
          path: scripts

      - name: Check whether the tests were successful or cancelled due to timeout
        run: bash scripts/check_success_timeout_big_test ${{ secrets.GITHUB_TOKEN }} ${{ github.repository }} ${{ github.run_id }}
